Entry1:
   	print(shuttle)
	1. Scenario - 2 clients, 3 replicas , no timeout, non pseudoRandom Workload
	2. config1.txt
	3. Running commands:
		python3 -m da -n node2 -D replica.da
		python3 -m da -n node3 -D client.da
		python3 -m da -n node1 -D olympus.da
		python3 -m da -n node0 init.da ../config/config1.txt
	4. Log files generated inside the folder - ./src/logs/test1/
	5. Programmatic check :
		Client log file displays "Got Expected Result"
	6. Pass
	
Entry2:
	1. Scenario - 2 clients, 3 replicas , no timeout, non pseudoRandom Workload
	2. config2.txt
	3. Running commands:
		python3 -m da -n node2 -D replica.da
		python3 -m da -n node3 -D client.da
		python3 -m da -n node1 -D olympus.da
		python3 -m da -n node0 init.da ../config/config2.txt
	4. Log files generated inside the folder - ./src/logs/test2/
	5. Programmatic check :
		Client log file displays "Not an expected result. Test Case Failed."
	6. Fail because expectedWorkloadResult didn't match with actual result from system
	
Entry3:
	1. Scenario - 2 clients, 3 replicas , no timeout, pseudoRandom Workload
	2. config3.txt
	3. Running commands:
		python3 -m da -n node2 -D replica.da
		python3 -m da -n node3 -D client.da
		python3 -m da -n node1 -D olympus.da
		python3 -m da -n node0 init.da ../config/config3.txt
	4. Log files generated inside the folder - ./src/logs/test3/
	5. Programmatic check :
		Run this test twice. Same results will come.
	6. Pass

Entry4:
	1. Scenario - 10 clients, 7 replicas , no timeout, pseudoRandom Workloads
	2. config4.txt
	3. Running commands:
		python3 -m da -n node2 -D replica.da
		python3 -m da -n node3 -D client.da
		python3 -m da -n node1 -D olympus.da
		python3 -m da -n node0 init.da ../config/config4.txt
	4. Log files generated inside the folder - ./src/logs/test4/
	5. Programmatic check :
		Run this test twice. Same results will come.
	6. Pass

Entry5:
	1. Scenario - 2 clients, 5 replicas , client timeouts, non pseudoRandom Workloads
		On timeout, client retransmits requests to all 5 replicas
		Replicas check resultProof in cacheResult. It doesn't find in the cache so it forwards retransmit request to head replica.   
	2. config5.txt
	3. Running commands:
		python3 -m da -n node2 -D replica.da
		python3 -m da -n node3 -D client.da
		python3 -m da -n node1 -D olympus.da
		python3 -m da -n node0 init.da ../config/config5.txt
	4. Log files generated inside the folder - ./src/logs/test5/
	5. Programmatic check :
		Each client log file displays "Got Expected Result"
	6. Pass

Entry6:
	1. Scenario - 2 clients, 5 replicas , client timeouts, replica timeouts, non pseudoRandom Workloads
		On timeout, client retransmits requests to all 5 replicas
		Replicas check resultProof in cacheResult. It doesn't find in the cache so it forwards retransmit request to head replica.
		While awaiting for resultshuttle, replica also timeouts. Hence, so client doesn't get the result.
	2. config6.txt
	3. Running commands:
		python3 -m da -n node2 -D replica.da
		python3 -m da -n node3 -D client.da
		python3 -m da -n node1 -D olympus.da
		python3 -m da -n node0 init.da ../config/config6.txt
	4. Log files generated inside the folder - ./src/logs/test6/
	5. Programmatic check :
		Replica log says "Timeout for retransmission request for operation"
	6. Pass
	
Entry7:
	1. Scenario - gave invalid range for slice operation
	2. config7.txt
	3. Running commands:
		python3 -m da -n node2 -D replica.da
		python3 -m da -n node3 -D client.da
		python3 -m da -n node1 -D olympus.da
		python3 -m da -n node0 init.da ../config/config7.txt
	4. Log files generated inside the folder - ./src/logs/test7/
	5. Programmatic check :
		Client log file displays "Not an expected result. Test Case Failed."
	6. Fail because the operation provided out of range indices values for the slice operation

Entry8:
	1. Scenario - for head replica performing failure(client2, seqnum2) and running failure change_operation()
	2. config8.txt
	3. Running commands:
		python3 -m da -n node2 -D replica.da
		python3 -m da -n node3 -D client.da
		python3 -m da -n node1 -D olympus.da
		python3 -m da -n node0 init.da ../config/config8.txt
	4. Log files generated inside the folder - ./src/logs/test8/
	5. Programmatic check :
		Client log file displays "Not an expected result. Test Case Failed."
	6. Fail because of the failure introduced in the config file
	
Entry9:
	1. Scenario - clients - 2, replica - 3 ,
		For replica 2 performing failure(client1, seqnum3). This introduces the failure change_result(). 
		Replica 2 gives proof of misbehavior because changed result doesn't match with the previous result statements. 
	2. config9.txt
	3. Running commands:
		python3 -m da -n node2 -D replica.da
		python3 -m da -n node3 -D client.da
		python3 -m da -n node1 -D olympus.da
		python3 -m da -n node0 init.da ../config/config9.txt
	4. Log files generated inside the folder - ./src/logs/test9/
	5. Programmatic check :
		Replica_2 log file displays "Proof of misbehavior"
	6. Fail because of the failure introduced in the config file. Changed result doesn't match with the previous result statements.

Entry10:
	1. Scenario - clients - 1, replica - 3 ,
		For replica 2 performing failure(client1, seqnum3). This introduces the failure shuttle(). 
		Replica 2 gives proof of misbehavior because changed result doesn't match with the previous result statements. 
	2. config10.txt
	3. Running commands:
		python3 -m da -n node2 -D replica.da
		python3 -m da -n node3 -D client.da
		python3 -m da -n node1 -D olympus.da
		python3 -m da -n node0 init.da ../config/config10.txt
	4. Log files generated inside the folder - ./src/logs/test10/
	5. Programmatic check :
		Replica_2 log file displays "Proof of misbehavior"
	6. Fail because of the failure introduced in the config file. Changed result doesn't match with the previous result statements.

Entry11:
        1. Scenario - clients - 1, replica - 3
        2. config11.txt
        3. Running commands:
                python3 -m da -n node2 -D replica.da
                python3 -m da -n node3 -D client.da
                python3 -m da -n node1 -D olympus.da
                python3 -m da -n node0 init.da ../config/config10.txt
        4. Log files generated inside the folder - ./src/logs/test11/
        5. Programmatic check :
                Replica_1 (head replica timeout waiting for result shuttle and send reconfig request to olympus)

Entry12:(head replica timeout)
        1. Scenario - clients - 1, replica - 3
        2. config12.txt
        3. Running commands:
                python3 -m da -n node2 -D replica.da
                python3 -m da -n node3 -D client.da
                python3 -m da -n node1 -D olympus.da
                python3 -m da -n node0 init.da ../config/config10.txt
        4. Log files generated inside the folder - ./src/logs/test11/
        5. Programmatic check :
		All non head replica timeout waiting for result shuttle and send reconfig request to olympus

Entry13:(non head replica timeout)
        1. Scenario - clients - 1, replica - 3
		2nd replica will change to get('X') and will send to tail replica and tail replica will send reconfiguration request to olympus 
        2. config13.txt
        3. Running commands:
                python3 -m da -n node2 -D replica.da
                python3 -m da -n node3 -D client.da
                python3 -m da -n node1 -D olympus.da
                python3 -m da -n node0 init.da ../config/config10.txt
        4. Log files generated inside the folder - ./src/logs/test11/
	5. Programmatic check :
		Olympus will sedn catch up message to replica three.


Entry13:(change operation)
        1. Scenario - clients - 1, replica - 3
                2nd replica will change to get('X') and will send to tail replica and tail replica will send reconfiguration request to olympus
        2. config13.txt
        3. Running commands:
                python3 -m da -n node2 -D replica.da
                python3 -m da -n node3 -D client.da
                python3 -m da -n node1 -D olympus.da
                python3 -m da -n node0 init.da ../config/config10.txt
        4. Log files generated inside the folder - ./src/logs/test11/
        5. Programmatic check :
                Olympus will sedn catch up message to replica three.

Entry14:(invalid_order_sig)
        1. Scenario - clients - 1, replica - 3
		Invalid signature of order statement in head replica is appended to shuttle
        2. config13.txt
        3. Running commands:
                python3 -m da -n node2 -D replica.da
                python3 -m da -n node3 -D client.da
                python3 -m da -n node1 -D olympus.da
                python3 -m da -n node0 init.da ../config/config10.txt
        4. Log files generated inside the folder - ./src/logs/test11/
        5. Programmatic check :
		2nd replica will send reconfigure request because order proof is invalid

Entry15:(invalid_result_sig)
        1. Scenario - clients - 1, replica - 3
                Invalid signature of result statement in head replica is appended to shuttle
        2. config13.txt
        3. Running commands:
                python3 -m da -n node2 -D replica.da
                python3 -m da -n node3 -D client.da
                python3 -m da -n node1 -D olympus.da
                python3 -m da -n node0 init.da ../config/config10.txt
        4. Log files generated inside the folder - ./src/logs/test11/
        5. Programmatic check :
                2nd replica will send reconfigure request because result proof is invalid

Entry17:(crash)
        1. Scenario - clients - 1, replica - 3
        2. config13.txt
        3. Running commands:
                python3 -m da -n node2 -D replica.da
                python3 -m da -n node3 -D client.da
                python3 -m da -n node1 -D olympus.da
                python3 -m da -n node0 init.da ../config/config10.txt
        4. Log files generated inside the folder - ./src/logs/test11/
        5. Programmatic check :
                2nd replica will crash 

Entry18:(extra_op)
        1. Scenario - clients - 1, replica - 3
        2. config13.txt
        3. Running commands:
                python3 -m da -n node2 -D replica.da
                python3 -m da -n node3 -D client.da
                python3 -m da -n node1 -D olympus.da
                python3 -m da -n node0 init.da ../config/config10.txt
        4. Log files generated inside the folder - ./src/logs/test11/
        5. Programmatic check :
		2nd replica will perform one extra operation put('a','a')
