import nacl.encoding
import nacl.signing
import nacl.hash
import json
import time
import os
from nacl.bindings.utils import sodium_memcmp
class Replica(process):
	def log(logString):
		self.logBuffer+=logString
		if(len(self.logBuffer)>0):
			self.f = open(logFilePath + 'replica_'+ str(replicaId) + '.log','a+')
			self.f.write(self.logBuffer)
			self.f.close()
			self.logBuffer=""

	# setup is called by olympus with sepcifiying the replica type - head/tail and private key of respective replica. 
	def setup(replicaId,isHead,isTail,signingKey,config,logFilePath):
		self.f = open(logFilePath + 'replica_'+ str(replicaId) + '.log','w')
		self.slotnumber = 0
		self.history = [] 
		self.cacheDict = []
		self.replicaList = []
		self.clientList = []
		self.db = {}
		self.resultShuttleFlag = False
		self.setupFlag = False
		self.responseFlag = False
		self.verifyKeyHexClientList= {}
		self.verifyKeyHexReplicaList= {}
		self.changeResult = False
		self.olympus = {}
		self.logBuffer=""
		self.changeSignOrder = False
		self.changeSignResult = False
		self.sleep = False
		self.crash = False
		self.incSlot = False
		self.drop = False
		self.f.write("\nReplica " + str(replicaId) +" setup done")

	# Message from olympus to intialize all variables.
	# replicaList - List of all replica
	# clientList - List of all clients
	# verifyKeyHexClientList - List of public key of clients
	# verifyKeyHexReplicaList - List of public key of replica
	def receive(msg=('setupReplica',replicaList,clientList,verifyKeyHexClientList,verifyKeyHexReplicaList), from_=p):
		self.replicaList = replicaList
		self.clientList = clientList
		self.verifyKeyHexClientList=verifyKeyHexClientList
		self.verifyKeyHexReplicaList=verifyKeyHexReplicaList
		self.setupFlag = True
		self.olympus = p
		log("\nReceived message from Olympus : \nReplicaList "+ str(replicaList)+ "\nclientList: "+ str(clientList))

	def changeFailFlag(config, request):
		failure = "failures" + "[0," + str(replicaId) + "]"
		if failure in config :
			operations = config[failure].split(";")
			for operation in operations:
				op = operation.split("),")
				action,operands = op[0].split("(")
				c,seq = operands.split(",")
				if(int(c) ==  int(request["clientId"]) and int(seq) == int(request["seqNo"])):
					if action == "client_request":
						if "increment_slot" in op[1]:
							self.incSlot = True
						elif "change_result" in op[1]:
							self.changeResult = True
						elif "drop_resul_stmt" in op[1]:
							dropHeadResult = True
						elif "invalid_order_sig" in op[1]:
							self.changeSignOrder = True
						elif "invalid_result_sig" in op[1]:
                                                        self.changeSignResult = True
						elif "crash" in op[1]:
							self.crash = True
						elif "sleep" in op[1]:
							self.sleep = True
						elif "extra_op" in op[1]:
							self.db["a"] = "a"
						elif "drop" in op[1]:
							self.drop = True
					if action == "shuttle":
						if "change_result" in op[1]:
							self.changeResult = True
						elif "drop_resul_stmt" in op[1]:
							dropHeadResult = True
						elif "invalid_order_sig" in op[1]:
							self.changeSignOrder = True
						elif "invalid_result_sig" in op[1]:
							self.changeSignResult = True
						elif "crash" in op[1]:
                                                        self.crash = True
						elif "sleep" in op[1]:
							self.sleep = True
						elif "drop" in op[1]:
                                                        self.drop = True

	def changeOperationFail(config, request):
                failure = "failures" + "[0," + str(replicaId) + "]"
                if failure in config :
                        operations = config[failure].split(";")
                        for operation in operations:
                                op = operation.split("),")
                                action,operands = op[0].split("(")
                                c,seq = operands.split(",")
                                if(int(c) ==  int(request["clientId"]) and int(seq) == int(request["seqNo"])):
                                        if action == "client_request":
                                                if "change_operation" in op[1]:
                                                        request["operation"] = "get('x')"
                                        if action == "shuttle":
                                                if "change_operation" in op[1]:
                                                        request["operation"] = "get('x')"
                return request

	# Handles result shuttle from successor and append it to respective cache and send it back to it's predecessor
	def receive(msg=('ResultShuttle',shuttle), from_=p):
		resultProof = shuttle["rproof"]
		log("\n\nReceived result shuttle from : " + str(p) + " for operation : " + resultProof["operation"])
		log("\nAppending resultShulttle to cache of replica")
		self.cacheDict.append(resultProof)
		self.resultShuttleFlag = True
		log("\nhistory - " + str(self.history))
		if "checkpointproof" in shuttle:
			log("\n*****Deleteing checkpoint proof ")
			for counter in range(0,3):
				del self.history[0]
		log("\nHistory - " + str(self.history))
		if(isHead == False):
			log("\nSending resultShuttle to previous replica : "+ str(self.replicaList[replicaId-2]["obj"]) + "\n")
			send(('ResultShuttle',shuttle,), to=self.replicaList[replicaId-2]["obj"])

	# Receives shuttle from previous replica. It performs follwing validation - 
	# 1. Checking history for slot number, sequence number for client Id
	# 2. Check validity of signed order statements of all previous replica
	# 3. Exceute operation and check hash of result with signed result statement of all previous replica
	# 4. Add opeartion to history of replica 
	# 5. Create a orderproof and resultProof and append it to shuttle
	# 6. Send shuttle to next replica
	def receive(msg=('shuttlefromReplica',shuttle,request,slotnumber,), from_=p):
		log("\n\nReceived shuttle from previous replica : "+ str(p) + " for operation : " + request["operation"])
		log("\nChecked history for slot number : " + str(slotnumber) + " and " + "sequence number : " + str(request["seqNo"] ))
		if(checkHistory(slotnumber, request["seqNo"],request["clientId"]) == False):
			log("\nChecking validity of order statement")
			if( checkValidityOfOrderStatement(shuttle["oproof"]) == True):
				log("\nProcessing request: " + request["operation"])
				changeFailFlag(config,request)

				if(self.crash == True):
					log("\n******Crash is enable*******")
					os._exit(-1)

				if(self.sleep == True):
					log("\n******Sleep enable********")
					time.sleep(5)
					self.sleep = False

				if(self.drop == False):

					result = processRequest(request["operation"])
					if(self.changeResult == True):
						result = "OK"
					self.changeResult = False
					log("\nChecked validity of result statement")
					if( checkResultValidity(shuttle["rproof"], result) == True ):
						if (self.changeSignOrder == True):
                                			self.changeSignOrder = False
                                			shuttle["oproof"]["orderStatement"].append(createInvalidOdrerStatement(slotnumber,request["seqNo"]))
                                			log("\n******Created OrderProof with INVALID signed oredrStatement")
						else:
                                			shuttle["oproof"]["orderStatement"].append(createOdrerStatement(slotnumber,request["seqNo"]))
                                			log("\nCreated OrderProof with signed oredrStatement")

						if (self.changeSignResult == True):
                                			self.changeSignResult = False
                                			shuttle["rproof"]["resultStatement"].append(createInvalidResultStatement((slotnumber,request["seqNo"],result)))
                        	        		log("\nCreated ResultProof with INVALID signed resultStatement")
						else:
	                                		shuttle["rproof"]["resultStatement"].append(createResultStatement(slotnumber,request["seqNo"],result))
        	                        		log("\nCreated ResultProof with signed resultStatement")
					
						createHistoryTuple(slotnumber,request["seqNo"],request["clientId"],request["operation"])
						log("\nAppended orderProof and resultproof to shuttle")
						log("\nCurrent Database : " + str(self.db))
						request = changeOperationFail(config,request)
						if "checkpointproof" in shuttle:
							log("\nCreated and signed checkpoint statement of current running state and appended to checkpointproof")
							shuttle["checkpointproof"]["checkPointStatement"].append(createCheckPointStatement())	
						sendRequest(request,shuttle,slotnumber)
						if await(self.resultShuttleFlag == True):
							log("\nGot a result shuttle for operation " + request["operation"])
						elif timeout(float(config["nonhead_timeout"])):
							log("\nNon-head replica timeout for operation : " + request["operation"])
							log("\nSending Reconfig request to olympus")
							send(('Reconfiguration-request',), to=self.olympus)
					else:
						log("\nResult Proof validty failed... Proof of misbehiviour\n Sending reconfiguration request to Olympus")
						send(('Reconfiguration-request',), to=self.olympus)
				else:
					log("\n****Dropping incoming request")
					self.drop = False
			else:
				log("\nOrder statement validty failed... Proof of misbehiviour")
				send(('Reconfiguration-request',), to=self.olympus)
		else:
			log("\nSame slot number is allocated with different operation")
			send(('Reconfiguration-request',), to=self.olympus)

	# Check result validity
	def checkResultValidity(resultProof, result):
		counter = 1
		for resultState in resultProof["resultStatement"]:
			order = decryptReplicaRequest(resultState,counter)
			if order is None:
                                return False
			if(order["value"] != result):
				return False
			counter += 1
		return True

	# create a hash of result.
	def createHash(value):
		HASHER = nacl.hash.sha256
		msg = bytes(value,'utf-8')
		digest = HASHER(msg, encoder=nacl.encoding.HexEncoder)
		#now send msg and digest to the user
		encodedMsg = nacl.encoding.HexEncoder.encode(msg)
		return encodedMsg,digest

	# Decrypt signed order statement of all previos replica and check validity
	def checkValidityOfOrderStatement(orderProof):
		counter = 1
		for signedOrder in orderProof["orderStatement"]:
			order = decryptReplicaRequest(signedOrder,counter)
			log("\n" + str(order))
			if order is None:
				log("\nOrder is none")
				return False
			if( order["slotNumber"] != orderProof["slotNumber"] and order["sequenceNumber"] != orderProof["slotNumber"]):
				return False
			counter += 1
		return True

	# Decrypt order/ result statement present inside shuttle
	def decryptReplicaRequest(signedStatement,replicaId):
		try:
			verify_key = nacl.signing.VerifyKey(self.verifyKeyHexReplicaList[replicaId], encoder=nacl.encoding.HexEncoder)
			data = verify_key.verify(signedStatement)
		except:
			return None
		return json.loads(data.decode('utf-8'))

	# Decrypt client request.
	def decryptClientRequest(signedRequest,clientId):
		verify_key = nacl.signing.VerifyKey(self.verifyKeyHexClientList[clientId], encoder=nacl.encoding.HexEncoder)
		data = verify_key.verify(signedRequest)
		return json.loads(data.decode('utf-8'))

	# Retransmission request from client
	# 1. checks replica cache - a> If found, send result proof and result back to client
	#			       b> Retransmit request to head replica  
	def receive(msg=('Retransmit',signedRequest,clientId,),from_=client):
		request = decryptClientRequest(signedRequest,clientId)
		log("\n\nReceived retransmit signed request from client :"+ str(client))
		log("\nDecrypted request: "+ request["operation"])
		isFound = False
		log("\nChecking in replica's cache...")
		for resultProof in self.cacheDict:
			if (resultProof["sequenceNumber"] == request["seqNo"]  and resultProof["clientId"] == clientId):
				log('\nFound operation: "+ request["operation"] +" in cache')
				send(('Result', resultProof, resultProof["result"],), to=client)
				isFound = True
		if(isFound == False and isHead == False):
			log("Can't find in entry in cache of replica. Retransmit request To Head for operation :" + request["operation"])
			send(('RetransmitToHead',signedRequest,clientId,), to=self.replicaList[0]["obj"])
			log("\nAwaiting for result shuttle...")
			if await(self.resultShuttleFlag == True):
				log("\nGot a result shuttle for operation " + request["operation"])
			elif timeout(float(config["nonhead_timeout"])):
				log("\nNon-head replica timeout for operation : " + request["operation"])
				log("\nSending Reconfig request to olympus")
				send(('Reconfiguration-request',), to=self.olympus)

	# Request from replica from timeout to head replica
	def receive(msg=('RetransmitToHead',signedRequest,clientId,), from_=replica):
		request = decryptClientRequest(signedRequest,clientId)
		log("\n\nReceived retransmit signed request from replica :"+ str(replica))
		log("\nDecrypted request: "+ request["operation"])
		slotNumber = checkHistoryClient(request["seqNo"],request["clientId"])
		if(slotNumber != -1):
			log("\nAwaiting for result shuttle...")
			if await(self.resultShuttleFlag == True):
				log("\nGot a result shuttle for operation " + request["operation"])
			elif timeout(float(config["head_timeout"])):
				log("\nHead replica timeout for operation : " + request["operation"])
				log("\nSending Reconfig request to olympus")
				send(('Reconfiguration-request',), to=self.olympus)
		else:
			log("\nCan not find retransmitted request in head replica history.So recreating a new request....")
			self.slotnumber += 1
			shuttle = {}
			log("\nHead Replica: Created slot number " + str(self.slotnumber))
			log("\nProcessing request: " + request["operation"])
			result = processRequest(request["operation"])
			log("\nProcessed request result: "+ result)
			oproof = createOrderProof(request, self.slotnumber)
			rproof = createResultProof(request, self.slotnumber, result)
			oproof["orderStatement"].append(createOdrerStatement(self.slotnumber,request["seqNo"]))
			log("\nCreated OrderProof with signed oredrStatement")
			rproof["resultStatement"].append(createResultStatement(self.slotnumber, request["seqNo"],result))
			log("\nCreated ResultProof with signed resultStatement")
			shuttle["oproof"] = oproof
			shuttle["rproof"] = rproof
			createHistoryTuple(self.slotnumber,request["seqNo"],request["clientId"])
			log("\nAppended orderProof and resultproof to shuttle")
			log("\nCurrent Database : " + str(self.db))
			sendRequest(request,shuttle,self.slotnumber)

	# Request from client
	def receive(msg=('Request',signedRequest,clientId,),from_=client):
		self.changeResult = False
		self.resultShuttleFlag = False
		request = decryptClientRequest(signedRequest,clientId)
		log("\n\nReceived signed request from client :"+ str(client))
		log("\nDecrypted request: "+ request["operation"])
		if(isHead == True):
			self.slotnumber += 1
			shuttle = {}
			log("\nHead Replica: Created slot number " + str(self.slotnumber))
			log("\nProcessing request: " + request["operation"])
			changeFailFlag(config,request)

			if(self.crash == True):
				log("\n*****Crash failure triggered....")
				os._exit(-1)

			if(self.sleep == True):
				log("\n*****Sleep failure triggered.... Replica is in sleep mode")
				time.sleep(5)
				self.sleep = False

			if(self.drop == False):
				result = processRequest(request["operation"])

				if(self.changeResult == True):
					log("\n******Change result failures triggered")
					result = "OK"
					self.changeResult = False

				oproof = createOrderProof(request, self.slotnumber)
				rproof = createResultProof(request, self.slotnumber, result)

				if (self.changeSignOrder == True):
					self.changeSignOrder = False
					oproof["orderStatement"].append(createInvalidOdrerStatement(self.slotnumber,request["seqNo"]))
					log("\n******Created OrderProof with INVALID signed oredrStatement")
				else:
					oproof["orderStatement"].append(createOdrerStatement(self.slotnumber,request["seqNo"]))
					log("\nCreated OrderProof with signed oredrStatement")

				if self.changeSignResult == True:
					self.changeSignResult = False				
					rproof["resultStatement"].append(createInvalidResultStatement(self.slotnumber, request["seqNo"],result))
					log("\nCreated ResultProof with INVALID signed resultStatement")
				else:
					rproof["resultStatement"].append(createResultStatement(self.slotnumber, request["seqNo"],result))
					log("\nCreated ResultProof with signed resultStatement")

				shuttle["oproof"] = oproof
				shuttle["rproof"] = rproof
				createHistoryTuple(self.slotnumber,request["seqNo"],request["clientId"],request["operation"])
				log("\nAppended orderProof and resultproof to shuttle")
				log("\nCurrent Database : " + str(self.db))

				if (self.slotnumber % 4 == 0):
					log("\nIntiating checkpoint at slotNumber" +  str(self.slotnumber))
					checkpointproof = {}
					checkpointproof["checkPointStatement"] = []
					checkpointproof["checkPointStatement"].append(createCheckPointStatement())
					log("\nCreated and signed checkpoint statement of current running state")
					shuttle["checkpointproof"] = checkpointproof

				request = changeOperationFail(config,request)

				sendRequest(request,shuttle,self.slotnumber)
				if (self.incSlot == True):
					self.slotnumber += 1
					self.incSlot = False	
				log("\nWaiting for result shuttle...")
				if await(self.resultShuttleFlag == True):
					log("\nGot a result shuttle for operation in head replica " + request["operation"])
				elif timeout(float(config["head_timeout"])):
					log("\nHead replica timeout for operation : " + request["operation"])
					log("\nSending Reconfig request to olympus " + str(self.olympus))
					send(('Reconfiguration-request',), to=self.olympus)
			else:
				log("\n********Dropping incoming request")
				self.drop = False

	def createOrderProof(request,slotNumber):
		proof = {}
		proof["Type"] = "order"
		proof["sequenceNumber"] = request["seqNo"]
		proof["slotNumber"] = slotNumber
		proof["clientId"] = request["clientId"]
		proof["replicaId"] = replicaId
		proof["orderStatement"] = []
		return proof

	def createResultProof(request,slotNumber,result):
		proof = {}
		proof["Type"] = "result"
		proof["sequenceNumber"] = request["seqNo"]
		proof["slotNumber"] = slotNumber
		proof["clientId"] = request["clientId"]
		proof["replicaId"] = replicaId
		proof["operation"] = request["operation"]
		proof["resultStatement"] = []
		proof["result"] = result
		return proof

	def createOdrerStatement(slotnumber, sequenceNumber):
		order = {}
		order["slotNumber"] = slotnumber
		order["sequenceNumber"] = sequenceNumber
		return signedData(order)

	def createInvalidOdrerStatement(slotnumber, sequenceNumber):
                order = {}
                order["slotNumber"] = slotnumber
                order["sequenceNumber"] = sequenceNumber
                return order

	def createResultStatement(slotnumber, sequenceNumber, value):
		order = {}
		order["slotNumber"] = slotnumber
		order["sequenceNumber"] = sequenceNumber
		order["value"] = value
		log("\nCreating a hash of result")
		return signedData(order)

	def createInvalidResultStatement(slotnumber, sequenceNumber, value):
                order = {}
                order["slotNumber"] = slotnumber
                order["sequenceNumber"] = sequenceNumber
                order["value"] = value
                log("\nCreating a hash of result")
                return order

	def createCheckPointStatement():
		return signedData(self.db)

	# Get signed statement
	def signedData(statement):
		signedRequest = signingKey.sign(bytes(json.dumps(statement),'utf-8'))
		return signedRequest

	def createHistoryTuple(slotNumber,sequenceNumber,clientId,request):
		h = {}
		h["seqNo"] = sequenceNumber
		h["slotNumber"] = slotNumber
		h["clientId"] = clientId
		h["operation"] = request
		self.history.append(h)
		log("\nAdded operation to replica's history")

	def checkHistory(slotNumber,sequenceNumber,clientId):
		for h in self.history:
			if(h["slotNumber"] == slotNumber and h["seqNo"] == sequenceNumber and h["clientId"] == clientId):
				return True
		return False

	def checkHistoryClient(sequenceNumber,clientId):
		for h in self.history:
				if(h["seqNo"] == sequenceNumber and h["clientId"] == clientId):
						return h["slotNumber"]
		return -1

	def processRequest(operation):
		index = operation.index("(")
		operationType = operation[0:index]
		rest = operation[index+1:len(operation)-1]
		operands = rest.split("'")
		if(operationType == "put"):
			self.db[operands[1]] = operands[3]
			return "OK"
		elif(operationType == "append"):
			if operands[1] not in self.db:
				return "Fail"
			else:
				db[operands[1]] = db[operands[1]] + operands[3]
				return "OK"
		elif(operationType == "slice"):
			sliceRange=operands[3].split(":")
			if operands[1] not in self.db:
				return "Fail"
			else:
				if (int(sliceRange[0]) < 0 or int(sliceRange[1]) >= len(db[operands[1]])):
						return "Fail"
				db[operands[1]]=db[operands[1]][int(sliceRange[0]):int(sliceRange[1])]
				return "OK"
		elif(operationType == "get"):
			if operands[1] in self.db:
				return self.db[operands[1]]
			else:
				return "" #returning empty string if key is not present

	def sendRequest(request,shuttle,slotnumber):
		if (isTail == True):
			self.resultShuttleFlag = True
			log("\nSending ResultProof and result to client : " + str(self.clientList[request["clientId"]-1]["obj"]))
			send(('Result', shuttle["rproof"], shuttle["rproof"]["result"],), to=self.clientList[request["clientId"]-1]["obj"])
			log("\nSending Result Shuttle to previous replica : " + str(self.replicaList[replicaId-2]["obj"]))
			if "checkpointproof" in shuttle:
				log("\nValidated checkpoint proof and forwarding completed checkpoint proof")
			send(('ResultShuttle', shuttle,), to=self.replicaList[replicaId-2]["obj"])
		else:
			for each in self.replicaList:
				if(each["id"] == replicaId+1):
					log("\nSending shuttle to next Replica : " +  str(each["obj"]) + " with request " +  request["operation"])
					send(('shuttlefromReplica',shuttle,request,slotnumber,), to=each["obj"])

	def receive(msg=('WedgeRequest',),from_=oly):
		send(('WedgedStatement', replicaId, self.history,), to=oly)
		log("\nSent wedge response to Olympus" + str(oly))

	def receive(msg=('CatchUpMessage', catchUpData),from_=oly):
		for data in catchUpData:
			operation = data["operation"]
			log("\n Caught Up message from olympus for operation" + str(operation))
			result = processRequest(operation)
			log("\n DB Status - " + self.db)

		log("\n Sending CaughtUp Message to olympus.....")
		send(('CaughtUpMessage', self.replicaId,self.db,result,), to=oly)
				
	def run():
		self.f.write("\nRunning Replica " + str(replicaId))
		self.f.close()
		await(self.setupFlag == True)
		if await(self.responseFlag == True):
			output("Done")
		#elif timeout(1):
		#	output("Closing log file")
		#	self.f.close()
