import sys
import nacl.encoding
import nacl.signing
import itertools
Replica = import_da('replica')
Client = import_da('client')
#replicaList = []
#clientList = []
class Olympus(process):
	def log(logString):
		self.logBuffer+=logString
		if(len(self.logBuffer)>0):
			self.f = open(logFilePath + 'olympus.log','a+')
			self.f.write(self.logBuffer)
			self.f.close()
			self.logBuffer=""
			

	# To generate Signed key fro all replica and client
	def generateSignKey():
		#returns signing_key and verify_key_hex
		signing_key = nacl.signing.SigningKey.generate() #Generating a new random signing key for client	
		verify_key = signing_key.verify_key	# Generating the verify key for the above signing key
		verify_key_hex = verify_key.encode(encoder=nacl.encoding.HexEncoder)	# Serialize the verify key to send it to a third party
		keyPair = {}
		keyPair["signing_key"] = signing_key
		keyPair["verify_key_hex"] = verify_key_hex
		return keyPair

	def getReplicaList(t):
		self.replicaList = []
		numberOfReplica = (2*t) + 1;
		for counter in range(1,numberOfReplica+1):
			keyPair = generateSignKey()
			if(counter == 1):
				log("\n Creating head replica")
				r = new(Replica.Replica, args=(counter, True, False,keyPair["signing_key"],config,logFilePath,), at='node2')
			elif (counter == numberOfReplica):
				log("\n Creating replica "+str(counter))
				r = new(Replica.Replica, args=(counter, False, True, keyPair["signing_key"],config,logFilePath,), at='node2')
			else:
				log("\n Creating replica "+str(counter))
				r = new(Replica.Replica, args=(counter, False, False, keyPair["signing_key"],config,logFilePath,), at='node2')
			self.verifyKeyHexReplicaList[counter] = keyPair["verify_key_hex"]
			replica = {}
			replica["id"] = counter
			replica["obj"] = r
			self.replicaList.append(replica)
		output("\n "+str(self.replicaList))
		#return replicaList;

	def getClientList(count):
		for counter in range(1,count+1):
			keyPair = generateSignKey()
			workloadKey = 'workload[' + str(counter-1) + ']'
			c = new(Client.Client, args=(counter, config[workloadKey], keyPair["signing_key"],config,logFilePath,), at='node3')
			# Creating a client and signature mapping
			self.verifyKeyHexClientList[counter]= keyPair["verify_key_hex"]
			client = {}
			client["id"] = counter
			client["obj"] = c
			self.clientList.append(client)
		#return clientList;

	#On getting reconfig request, olympus sends wedge reuest to all replicas	
	def sendWedgeRequest():
		for each in replicaList:
			log("\n Sending wedge request to replica " +  str(each["obj"]))
			send(('WedgeRequest',), to=each["obj"])
			

	def receive(msg=('WedgedStatement',replicaId, history,runningState,),from_=r):
		log("\nReceived wedge statement from "+ str(r))
		self.wedgedStatementList[replicaId] = history
		self.countResponse+=1
		log("\n Added history of replica "+str(replicaId)+" to wedge statement list")
		
	def hasValidWedgedMessage(quorum):
		for replicaId in quorum:
			if(replicaId not in self.wedgedStatementList):
				log("\n History of replicaId "+str(replicaId)+" is not yet received")
				return False
		historySet = {}
		for replicaId in quorum:
			#output("\n "+str(self.wedgedStatementList[replicaId]))
			for orderProof in self.wedgedStatementList[replicaId]:
				#output("\n"+str(orderProof))
				slotNumber = orderProof['slotNumber']
				if(slotNumber not in historySet):
					historySet[slotNumber] = orderProof['seqNo']
				else:
					if(historySet[slotNumber]!=orderProof['seqNo']):
						log("\n historySet[slotNumber] = "+ str(historySet[slotNumber])+ "orderProof[seqNo]=" + str(orderProof['seqNo']))
						log("\n Quorum "+ str(quorum)+ " is inconsistent!!!")
						return False
				#output("\nHistorySet = "+ str(historySet))
		log("\n Found consistent quorum. Wedged Messages are valid.")
		return True	

	def findValidQuorum():
		for quorum in quorumList:
			if(hasValidWedgedMessage(quorum)):
				return quorum
			else:
				log("\n Checking next quorum for validity of wedged messages....")
				continue
	
	def findLongHistoryReplica(validQuorum):
		maxLen=0
		longestHistReplica=0
		for replicaId in validQuorum:
			curLen=len(self.wedgedStatementList[replicaId])
			if(maxLen<curLen):
				maxLen=curLen
				longestHistReplica=replicaId
		log("\n Longest history = "+ str(self.wedgedStatementList[longestHistReplica]))
		return longestHistReplica
	
	def findDiffInHist(list1,list2):
		catch = []
		for each in list2:
			if(each not in list1):
				#output("\nDiff"+str(each))
				catch.append(each)
		return catch
		
	def sendCatchUp(validQuorum,longestHistReplica):
		ch=""
		log("\n Sending catch up data to replicas in quorum "+ str(validQuorum))
		for replicaId in validQuorum:
			catchUpData=[]
			if(replicaId!=longestHistReplica):
				catchUpData = findDiffInHist(self.wedgedStatementList[replicaId],self.wedgedStatementList[longestHistReplica])
				log("\n Sending catch up data "+ str(catchUpData) + " to replica "+ str(replicaId))
				self.sendCatchUpMessagesCount+=1
				send(('CatchUpMessage',catchUpData,),to=self.replicaList[replicaId-1]["obj"])
	
	def receive(msg=('CaughtUpMessage',replicaId,runningState,resultStatement,), from_ = p):
		log("\n Received caught up message from replicaId "+ str(replicaId))
		log("\n Caught up running state = "+ str(runningState) + "resultStatement = "+ str(resultStatement))
		self.caughtUpMessagesCount+=1
		self.caughtUpRunningStateMessages.append(runningState) 
		self.caughtUpResultProofMessages.append(resultStatement)
	
	def isCaughtUpMessageConsistent():
		commonRunningState = self.caughtUpRunningStateMessages[0]
		commonResultProof = self.caughtUpResultProofMessages[0]
		log("\n common running state = "+ str(self.caughtUpRunningStateMessages[0]))
		log("\n common result proof = "+str(self.caughtUpResultProofMessages[0]))
		for each in range(1,len(self.caughtUpRunningStateMessages)):
			log("\n Checking caught up message index = "+str(each))
			if(self.caughtUpRunningStateMessages[each]!=commonRunningState or self.caughtUpResultProofMessages[each]!=commonResultProof):
				log("\n Caught Up messages do not match among replicas in the quorum!!!")
				return False
		return True,commonRunningState
	
	def receive(msg=('RunningState',replicaId,runningState,), from_=p):
		self.getRunningStateFlag = True
		self.getRunningState = runningState
		
	def abortAllReplicas():
		for each in self.replicaList:
			log("\n Aborting replicaId "+ str(each))
			send(('Abort',),to=each["obj"])
		
		
	def verifyRunningState(validQuorum,ch):
		for replicaId in validQuorum:
			self.getRunningStateFlag = False
			self.getRunningState = ""
			send(('GetRunningState',),to=self.replicaList[replicaId-1]["obj"])
			if await(self.getRunningStateFlag):
				log("\nGot running state from replicaId "+str(replicaId)+" and now validating it with ch..")
				if(ch==self.getRunningState):
					return replicaId
				else:
					log("\n ch doesn't match with running state of replicaId "+str(replicaId))
			elif timeout(1):
				log("\nDid not receive running state from replicaId "+str(replicaId))
		return -1
	
	# any replica sends reconfig request
	def receive(msg=('Reconfiguration-request',), from_ = p):
		if(not self.isReconfiguring):
			self.isReconfiguring = True
		else:
			await(self.isReconfiguring==False)
		
		log("\n\nReceived reconfiguration request from replica " +  str(p))
		log("\nSending wedge request to all replicas .....")
		sendWedgeRequest()
		
		#await till t+1 responses to initiate consistency check
		if await(self.countResponse==config["t"]+1):
			self.countResponse=0
			log("\n\nReceived wedge statements from t+1 replicas : ")
		log("\n" + str(self.wedgedStatementList))
		#validate wedge statement messages
		log("\n\nInitiating Consistency check and catchUp check....")
		
		if await(self.countResponse>config["t"]+1):
			self.countResponse=0
		elif timeout(0.5):
			self.countResponse=0
		
		validQuorum=()
		for quorum in quorumList:
			validQuorum=()
			self.caughtUpRunningStateMessages = []
			self.caughtUpResultProofMessages = []
			self.caughtUpMessagesCount = 0
			self.sendCatchUpMessagesCount = 0
			if(hasValidWedgedMessage(quorum)):
				validQuorum=quorum
			else:
				log("\nChecking next quorum for validity of wedged messages....")
				continue
			log("\nFound quorum with valid wedged messages. ValidQuorum = "+ str(validQuorum))
			log("\n\nFinding longest history")
			longestHistReplica = findLongHistoryReplica(validQuorum)
			log("\n\nSending catch up messages to replicas in validQuorum "+ str(validQuorum))
			sendCatchUp(validQuorum,longestHistReplica)
			if await(self.caughtUpMessagesCount==self.sendCatchUpMessagesCount):		
				log("\n\nReceived all caught up messages.Checking consistency among caught up messages")
				isCached,ch = isCaughtUpMessageConsistent()
				if(isCached):
					log("\nCaught Up Messages are consistent. Final valid quorum = "+str(validQuorum))
					break
				else:
					log("\nCaught Up Messages are NOT consistent. Checking next quorum in the quorumList")
					continue
			elif timeout(1):
				log("\nCouldn't receive ALL caught up messages. Checking next quorum in the quorumList")
				continue
				
		log("\n\nVerifying runningState now....")	
		runStateReplica = verifyRunningState(validQuorum,ch)
		if(runStateReplica==-1):
			log("\nCouldn't find any matching running state as ch!!!")
		else:
			log("\n ch matched with running state of replicaId "+ str(runStateReplica))
		log("\nAborting all replicas")
		abortAllReplicas()
		log("\nSwitching configuration. Setting up new replicas ")
		#for each in self.replicaList:
		#	log("\n POst Aborting replicaId "+ str(each))
		#	send(('Abort',),to=each["obj"])
		#switchConfig()
	
	def switchConfig():
		log("\n\n\n Setting up new configuration....")
		
		self.responseFlag=False
		self.wedgedStatementList = {}
		self.countResponse=0
		self.isReconfiguring = False
		self.caughtUpMessagesCount = 0
		self.sendCatchUpMessagesCount = 0
		self.caughtUpRunningStateMessages = []
		self.caughtUpResultProofMessages = []
		self.getRunningStateFlag = False
		self.getRunningState = ""

		#list of clientId-Key dictionary pairs
		self.verifyKeyHexClientList = {}
		self.verifyKeyHexReplicaList = {}

		log("\n Setting up all new Replicas...")
		getReplicaList(config["t"])

		log("\n Setting up all new private and public keys....")
		sendReplicaListToClient()
		sendReplicaListToReplica()
		
		log("\n Starting new replicas")
		for each in self.replicaList:
			start(each["obj"])

	def sendReplicaListToClient():
		log("\nSending list of replica and public key to all client")
		for each in clientList:
			log("\nSending list of replica and public key to client - " +  str(each["obj"]))
			send(('setupClient',replicaList,self.verifyKeyHexClientList,self.verifyKeyHexReplicaList,), to=each["obj"])

	def sendReplicaListToReplica():
		log("\nSending list of clients, replica and public keys to all replica")
		for each in replicaList:
			log("\nSending list of replica and public key to replica - " +  str(each["obj"]))
			send(('setupReplica',replicaList,clientList,self.verifyKeyHexClientList,self.verifyKeyHexReplicaList,), to=each["obj"])

	def createQuorumList(t):
		numberOfReplica = (2*t) + 1;
		quorumLen = t+1;
		self.quorumList = list(itertools.combinations(range(1,numberOfReplica+1), quorumLen))
		log("\nCreated quorumList as "+str(self.quorumList))
	
	def setup(config,logFilePath):
		# Open file pointer for log file
		self.logBuffer = ""
		self.f = open(logFilePath + 'olympus.log','w')
		self.f.close()
		log("\nSetting up olympus....")
		self.responseFlag=False
		self.wedgedStatementList = {}
		self.quorumList = []
		self.countResponse=0
		self.isReconfiguring = False
		self.caughtUpMessagesCount = 0
		self.sendCatchUpMessagesCount = 0
		self.caughtUpRunningStateMessages = []
		self.caughtUpResultProofMessages = []
		self.getRunningStateFlag = False
		self.getRunningState = ""
		self.replicaList = []
		self.clientList = []
		#creating quorumList
		log("\nCreating quorumList")
		createQuorumList(config["t"])
		
		#list of clientId-Key dictionary pairs
		self.verifyKeyHexClientList = {}
		self.verifyKeyHexReplicaList = {}

		log("\nSetting up all Replica...")
		getReplicaList(config["t"])

		log("\nSetting up all client....")
		getClientList(config["num_client"])

		log("\nSetting up all private and public keys....")
		sendReplicaListToClient()
		sendReplicaListToReplica()

	def run():
		for each in self.clientList:
			start(each["obj"])
		for each in self.replicaList:
			start(each["obj"])
		log("\nOlympus is started.")
		if await(self.responseFlag == True):
			output("Done")
		#elif timeout(3):
		#	output("Closing log file")
		#	self.f.close()
